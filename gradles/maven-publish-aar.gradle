// *********************************************************************
apply plugin: 'maven-publish'
apply plugin: 'signing' //使用signing plugin做数字签名

signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

// 读取配置信息
ext {
    // 读取配置信息
    File propFile = file("maven_publish.properties")
    Properties properties = new Properties()
    if (propFile.exists()) {
        properties.load(propFile.newDataInputStream())
    }
    artifact_Id = properties.getProperty('POM_ARTIFACT_ID')
    version_name = properties.getProperty('POM_VERSIONNAME')
    desc = properties.getProperty("POM_DESC")
    group_id = properties.getProperty("POM_GROUP_ID")
}

// 判断版本是Release or Snapshots
def isReleaseBuild() {
    return !("${version_name}".contains("SNAPSHOT"))
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        Core(MavenPublication) {
            groupId group_id
            artifactId artifact_Id
            version version_name
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact(sourcesJar)
        }
    }
}

publishing {
    publications {
        Core(MavenPublication) {
            pom.withXml {
                asNode().appendNode('description', "${desc}")

                // 处理依赖关系
                final dependenciesNode = asNode().appendNode('dependencies')

                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return // ignore invalid dependencies

                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)

                    if (!dep.transitive) {
                        // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }

                // List all "compile" dependencies (for old Gradle)
                configurations.compile.getAllDependencies().each { dep -> addDependency(dep, "compile") }
                // List all "api" dependencies (for new Gradle) as "compile" dependencies
                configurations.api.getAllDependencies().each { dep -> addDependency(dep, "compile") }
                // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
                configurations.implementation.getAllDependencies().each { dep -> addDependency(dep, "runtime") }
            }
        }
    }
}

publishing {
    repositories {
        //指定项目部署到的中央库地址，UserName和Password就是Part 1中注册的账号。
        if (!isReleaseBuild()) {
            maven {
                url SNAPSHOT_REPOSITORY_URL
            }
        } else {
            maven {
                url RELEASE_REPOSITORY_URL
                credentials {
                    username = USERNAME
                    password = PASSWORD
                }
            }
        }
    }
}
